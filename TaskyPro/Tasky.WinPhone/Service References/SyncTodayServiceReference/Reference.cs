//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace Tasky.WinPhone.SyncTodayServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://sync.today/", ConfigurationName="SyncTodayServiceReference.TaskDatabaseSoap")]
    public interface TaskDatabaseSoap {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sync.today/GetAccount", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NuObject))]
        System.IAsyncResult BeginGetAccount(System.Guid accountId, System.AsyncCallback callback, object asyncState);
        
        Tasky.WinPhone.SyncTodayServiceReference.Account EndGetAccount(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sync.today/GetAccount2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NuObject))]
        System.IAsyncResult BeginGetAccount2(string accountId, System.AsyncCallback callback, object asyncState);
        
        Tasky.WinPhone.SyncTodayServiceReference.Account EndGetAccount2(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sync.today/GetTasks", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NuObject))]
        System.IAsyncResult BeginGetTasks(Tasky.WinPhone.SyncTodayServiceReference.Account account, Tasky.WinPhone.SyncTodayServiceReference.User user, System.AsyncCallback callback, object asyncState);
        
        Tasky.WinPhone.SyncTodayServiceReference.NuTask[] EndGetTasks(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sync.today/GetTasks2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NuObject))]
        System.IAsyncResult BeginGetTasks2(string accountId, string userInternalId, System.AsyncCallback callback, object asyncState);
        
        Tasky.WinPhone.SyncTodayServiceReference.NuTask[] EndGetTasks2(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sync.today/GetTask", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NuObject))]
        System.IAsyncResult BeginGetTask(Tasky.WinPhone.SyncTodayServiceReference.Account account, Tasky.WinPhone.SyncTodayServiceReference.User user, string id, System.AsyncCallback callback, object asyncState);
        
        Tasky.WinPhone.SyncTodayServiceReference.NuTask EndGetTask(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sync.today/GetTask2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NuObject))]
        System.IAsyncResult BeginGetTask2(string accountId, string userInternalId, string id, System.AsyncCallback callback, object asyncState);
        
        Tasky.WinPhone.SyncTodayServiceReference.NuTask EndGetTask2(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sync.today/SaveTask", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NuObject))]
        System.IAsyncResult BeginSaveTask(Tasky.WinPhone.SyncTodayServiceReference.Account account, Tasky.WinPhone.SyncTodayServiceReference.User user, Tasky.WinPhone.SyncTodayServiceReference.NuTask task, System.AsyncCallback callback, object asyncState);
        
        Tasky.WinPhone.SyncTodayServiceReference.NuTask EndSaveTask(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sync.today/ChangeTaskExternalId", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NuObject))]
        System.IAsyncResult BeginChangeTaskExternalId(Tasky.WinPhone.SyncTodayServiceReference.Account account, Tasky.WinPhone.SyncTodayServiceReference.User user, string oldId, Tasky.WinPhone.SyncTodayServiceReference.NuTask task, System.AsyncCallback callback, object asyncState);
        
        Tasky.WinPhone.SyncTodayServiceReference.NuTask EndChangeTaskExternalId(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sync.today/GetUserSalt", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NuObject))]
        System.IAsyncResult BeginGetUserSalt(string email, System.AsyncCallback callback, object asyncState);
        
        string EndGetUserSalt(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sync.today/LoginUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NuObject))]
        System.IAsyncResult BeginLoginUser(Tasky.WinPhone.SyncTodayServiceReference.User user, System.AsyncCallback callback, object asyncState);
        
        bool EndLoginUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sync.today/LoginUser2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NuObject))]
        System.IAsyncResult BeginLoginUser2(string email, string password, System.AsyncCallback callback, object asyncState);
        
        Tasky.WinPhone.SyncTodayServiceReference.User EndLoginUser2(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://sync.today/GetAccountForClient", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(NuObject))]
        System.IAsyncResult BeginGetAccountForClient(System.Guid userid, System.Guid clientId, System.AsyncCallback callback, object asyncState);
        
        Tasky.WinPhone.SyncTodayServiceReference.Account EndGetAccountForClient(System.IAsyncResult result);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://sync.today/")]
    public partial class Account : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Guid internalIdField;
        
        private System.Guid belongsToUserField;
        
        private string usernameField;
        
        private string passwordField;
        
        private string serverField;
        
        private CommunicatorConnectInfo connectInfoField;
        
        private string accountAssemblyNameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public System.Guid InternalId {
            get {
                return this.internalIdField;
            }
            set {
                this.internalIdField = value;
                this.RaisePropertyChanged("InternalId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public System.Guid BelongsToUser {
            get {
                return this.belongsToUserField;
            }
            set {
                this.belongsToUserField = value;
                this.RaisePropertyChanged("BelongsToUser");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Username {
            get {
                return this.usernameField;
            }
            set {
                this.usernameField = value;
                this.RaisePropertyChanged("Username");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string Password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
                this.RaisePropertyChanged("Password");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string Server {
            get {
                return this.serverField;
            }
            set {
                this.serverField = value;
                this.RaisePropertyChanged("Server");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public CommunicatorConnectInfo ConnectInfo {
            get {
                return this.connectInfoField;
            }
            set {
                this.connectInfoField = value;
                this.RaisePropertyChanged("ConnectInfo");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string AccountAssemblyName {
            get {
                return this.accountAssemblyNameField;
            }
            set {
                this.accountAssemblyNameField = value;
                this.RaisePropertyChanged("AccountAssemblyName");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SimpleCommunicatorConnectInfo))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://sync.today/")]
    public abstract partial class CommunicatorConnectInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(NuTask))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(NuRequirement))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://sync.today/")]
    public abstract partial class NuObject : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string externalIdField;
        
        private System.DateTime lastModifiedField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ExternalId {
            get {
                return this.externalIdField;
            }
            set {
                this.externalIdField = value;
                this.RaisePropertyChanged("ExternalId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public System.DateTime LastModified {
            get {
                return this.lastModifiedField;
            }
            set {
                this.lastModifiedField = value;
                this.RaisePropertyChanged("LastModified");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(NuRequirement))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://sync.today/")]
    public partial class NuTask : NuObject {
        
        private string subjectField;
        
        private string bodyField;
        
        private System.Nullable<System.DateTime> startDateField;
        
        private System.Nullable<System.DateTime> dueDateField;
        
        private System.Nullable<System.DateTime> reminderField;
        
        private NuTaskPriority priorityField;
        
        private bool isPrivateField;
        
        private string companyField;
        
        private bool completedField;
        
        private NuRequirement[] parentsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Subject {
            get {
                return this.subjectField;
            }
            set {
                this.subjectField = value;
                this.RaisePropertyChanged("Subject");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Body {
            get {
                return this.bodyField;
            }
            set {
                this.bodyField = value;
                this.RaisePropertyChanged("Body");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=2)]
        public System.Nullable<System.DateTime> StartDate {
            get {
                return this.startDateField;
            }
            set {
                this.startDateField = value;
                this.RaisePropertyChanged("StartDate");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=3)]
        public System.Nullable<System.DateTime> DueDate {
            get {
                return this.dueDateField;
            }
            set {
                this.dueDateField = value;
                this.RaisePropertyChanged("DueDate");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=4)]
        public System.Nullable<System.DateTime> Reminder {
            get {
                return this.reminderField;
            }
            set {
                this.reminderField = value;
                this.RaisePropertyChanged("Reminder");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public NuTaskPriority Priority {
            get {
                return this.priorityField;
            }
            set {
                this.priorityField = value;
                this.RaisePropertyChanged("Priority");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public bool IsPrivate {
            get {
                return this.isPrivateField;
            }
            set {
                this.isPrivateField = value;
                this.RaisePropertyChanged("IsPrivate");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public string Company {
            get {
                return this.companyField;
            }
            set {
                this.companyField = value;
                this.RaisePropertyChanged("Company");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public bool Completed {
            get {
                return this.completedField;
            }
            set {
                this.completedField = value;
                this.RaisePropertyChanged("Completed");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=9)]
        public NuRequirement[] Parents {
            get {
                return this.parentsField;
            }
            set {
                this.parentsField = value;
                this.RaisePropertyChanged("Parents");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.33440")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://sync.today/")]
    public enum NuTaskPriority {
        
        /// <remarks/>
        Low,
        
        /// <remarks/>
        Normal,
        
        /// <remarks/>
        High,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://sync.today/")]
    public partial class NuRequirement : NuTask {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://sync.today/")]
    public partial class User : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Guid internalIdField;
        
        private System.DateTime createdField;
        
        private bool isBlockedField;
        
        private int maintenanceField;
        
        private string firstNameField;
        
        private string lastNameField;
        
        private string emailField;
        
        private string passwordField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public System.Guid InternalId {
            get {
                return this.internalIdField;
            }
            set {
                this.internalIdField = value;
                this.RaisePropertyChanged("InternalId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public System.DateTime Created {
            get {
                return this.createdField;
            }
            set {
                this.createdField = value;
                this.RaisePropertyChanged("Created");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public bool IsBlocked {
            get {
                return this.isBlockedField;
            }
            set {
                this.isBlockedField = value;
                this.RaisePropertyChanged("IsBlocked");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public int Maintenance {
            get {
                return this.maintenanceField;
            }
            set {
                this.maintenanceField = value;
                this.RaisePropertyChanged("Maintenance");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string FirstName {
            get {
                return this.firstNameField;
            }
            set {
                this.firstNameField = value;
                this.RaisePropertyChanged("FirstName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string LastName {
            get {
                return this.lastNameField;
            }
            set {
                this.lastNameField = value;
                this.RaisePropertyChanged("LastName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string Email {
            get {
                return this.emailField;
            }
            set {
                this.emailField = value;
                this.RaisePropertyChanged("Email");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public string Password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
                this.RaisePropertyChanged("Password");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://sync.today/")]
    public partial class SimpleCommunicatorConnectInfo : CommunicatorConnectInfo {
        
        private string usernameField;
        
        private string passwordField;
        
        private string serverField;
        
        private System.Guid internalIdField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Username {
            get {
                return this.usernameField;
            }
            set {
                this.usernameField = value;
                this.RaisePropertyChanged("Username");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
                this.RaisePropertyChanged("Password");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Server {
            get {
                return this.serverField;
            }
            set {
                this.serverField = value;
                this.RaisePropertyChanged("Server");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public System.Guid InternalId {
            get {
                return this.internalIdField;
            }
            set {
                this.internalIdField = value;
                this.RaisePropertyChanged("InternalId");
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface TaskDatabaseSoapChannel : Tasky.WinPhone.SyncTodayServiceReference.TaskDatabaseSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Tasky.WinPhone.SyncTodayServiceReference.Account Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Tasky.WinPhone.SyncTodayServiceReference.Account)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAccount2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAccount2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Tasky.WinPhone.SyncTodayServiceReference.Account Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Tasky.WinPhone.SyncTodayServiceReference.Account)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTasksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTasksCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Tasky.WinPhone.SyncTodayServiceReference.NuTask[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Tasky.WinPhone.SyncTodayServiceReference.NuTask[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTasks2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTasks2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Tasky.WinPhone.SyncTodayServiceReference.NuTask[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Tasky.WinPhone.SyncTodayServiceReference.NuTask[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Tasky.WinPhone.SyncTodayServiceReference.NuTask Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Tasky.WinPhone.SyncTodayServiceReference.NuTask)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTask2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTask2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Tasky.WinPhone.SyncTodayServiceReference.NuTask Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Tasky.WinPhone.SyncTodayServiceReference.NuTask)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaveTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Tasky.WinPhone.SyncTodayServiceReference.NuTask Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Tasky.WinPhone.SyncTodayServiceReference.NuTask)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChangeTaskExternalIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ChangeTaskExternalIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Tasky.WinPhone.SyncTodayServiceReference.NuTask Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Tasky.WinPhone.SyncTodayServiceReference.NuTask)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUserSaltCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserSaltCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoginUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public LoginUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoginUser2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public LoginUser2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Tasky.WinPhone.SyncTodayServiceReference.User Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Tasky.WinPhone.SyncTodayServiceReference.User)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAccountForClientCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAccountForClientCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Tasky.WinPhone.SyncTodayServiceReference.Account Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Tasky.WinPhone.SyncTodayServiceReference.Account)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TaskDatabaseSoapClient : System.ServiceModel.ClientBase<Tasky.WinPhone.SyncTodayServiceReference.TaskDatabaseSoap>, Tasky.WinPhone.SyncTodayServiceReference.TaskDatabaseSoap {
        
        private BeginOperationDelegate onBeginGetAccountDelegate;
        
        private EndOperationDelegate onEndGetAccountDelegate;
        
        private System.Threading.SendOrPostCallback onGetAccountCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAccount2Delegate;
        
        private EndOperationDelegate onEndGetAccount2Delegate;
        
        private System.Threading.SendOrPostCallback onGetAccount2CompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTasksDelegate;
        
        private EndOperationDelegate onEndGetTasksDelegate;
        
        private System.Threading.SendOrPostCallback onGetTasksCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTasks2Delegate;
        
        private EndOperationDelegate onEndGetTasks2Delegate;
        
        private System.Threading.SendOrPostCallback onGetTasks2CompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTaskDelegate;
        
        private EndOperationDelegate onEndGetTaskDelegate;
        
        private System.Threading.SendOrPostCallback onGetTaskCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTask2Delegate;
        
        private EndOperationDelegate onEndGetTask2Delegate;
        
        private System.Threading.SendOrPostCallback onGetTask2CompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveTaskDelegate;
        
        private EndOperationDelegate onEndSaveTaskDelegate;
        
        private System.Threading.SendOrPostCallback onSaveTaskCompletedDelegate;
        
        private BeginOperationDelegate onBeginChangeTaskExternalIdDelegate;
        
        private EndOperationDelegate onEndChangeTaskExternalIdDelegate;
        
        private System.Threading.SendOrPostCallback onChangeTaskExternalIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserSaltDelegate;
        
        private EndOperationDelegate onEndGetUserSaltDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserSaltCompletedDelegate;
        
        private BeginOperationDelegate onBeginLoginUserDelegate;
        
        private EndOperationDelegate onEndLoginUserDelegate;
        
        private System.Threading.SendOrPostCallback onLoginUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginLoginUser2Delegate;
        
        private EndOperationDelegate onEndLoginUser2Delegate;
        
        private System.Threading.SendOrPostCallback onLoginUser2CompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAccountForClientDelegate;
        
        private EndOperationDelegate onEndGetAccountForClientDelegate;
        
        private System.Threading.SendOrPostCallback onGetAccountForClientCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public TaskDatabaseSoapClient() {
        }
        
        public TaskDatabaseSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TaskDatabaseSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TaskDatabaseSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TaskDatabaseSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetAccountCompletedEventArgs> GetAccountCompleted;
        
        public event System.EventHandler<GetAccount2CompletedEventArgs> GetAccount2Completed;
        
        public event System.EventHandler<GetTasksCompletedEventArgs> GetTasksCompleted;
        
        public event System.EventHandler<GetTasks2CompletedEventArgs> GetTasks2Completed;
        
        public event System.EventHandler<GetTaskCompletedEventArgs> GetTaskCompleted;
        
        public event System.EventHandler<GetTask2CompletedEventArgs> GetTask2Completed;
        
        public event System.EventHandler<SaveTaskCompletedEventArgs> SaveTaskCompleted;
        
        public event System.EventHandler<ChangeTaskExternalIdCompletedEventArgs> ChangeTaskExternalIdCompleted;
        
        public event System.EventHandler<GetUserSaltCompletedEventArgs> GetUserSaltCompleted;
        
        public event System.EventHandler<LoginUserCompletedEventArgs> LoginUserCompleted;
        
        public event System.EventHandler<LoginUser2CompletedEventArgs> LoginUser2Completed;
        
        public event System.EventHandler<GetAccountForClientCompletedEventArgs> GetAccountForClientCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Tasky.WinPhone.SyncTodayServiceReference.TaskDatabaseSoap.BeginGetAccount(System.Guid accountId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAccount(accountId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Tasky.WinPhone.SyncTodayServiceReference.Account Tasky.WinPhone.SyncTodayServiceReference.TaskDatabaseSoap.EndGetAccount(System.IAsyncResult result) {
            return base.Channel.EndGetAccount(result);
        }
        
        private System.IAsyncResult OnBeginGetAccount(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid accountId = ((System.Guid)(inValues[0]));
            return ((Tasky.WinPhone.SyncTodayServiceReference.TaskDatabaseSoap)(this)).BeginGetAccount(accountId, callback, asyncState);
        }
        
        private object[] OnEndGetAccount(System.IAsyncResult result) {
            Tasky.WinPhone.SyncTodayServiceReference.Account retVal = ((Tasky.WinPhone.SyncTodayServiceReference.TaskDatabaseSoap)(this)).EndGetAccount(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAccountCompleted(object state) {
            if ((this.GetAccountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAccountCompleted(this, new GetAccountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAccountAsync(System.Guid accountId) {
            this.GetAccountAsync(accountId, null);
        }
        
        public void GetAccountAsync(System.Guid accountId, object userState) {
            if ((this.onBeginGetAccountDelegate == null)) {
                this.onBeginGetAccountDelegate = new BeginOperationDelegate(this.OnBeginGetAccount);
            }
            if ((this.onEndGetAccountDelegate == null)) {
                this.onEndGetAccountDelegate = new EndOperationDelegate(this.OnEndGetAccount);
            }
            if ((this.onGetAccountCompletedDelegate == null)) {
                this.onGetAccountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAccountCompleted);
            }
            base.InvokeAsync(this.onBeginGetAccountDelegate, new object[] {
                        accountId}, this.onEndGetAccountDelegate, this.onGetAccountCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Tasky.WinPhone.SyncTodayServiceReference.TaskDatabaseSoap.BeginGetAccount2(string accountId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAccount2(accountId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Tasky.WinPhone.SyncTodayServiceReference.Account Tasky.WinPhone.SyncTodayServiceReference.TaskDatabaseSoap.EndGetAccount2(System.IAsyncResult result) {
            return base.Channel.EndGetAccount2(result);
        }
        
        private System.IAsyncResult OnBeginGetAccount2(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string accountId = ((string)(inValues[0]));
            return ((Tasky.WinPhone.SyncTodayServiceReference.TaskDatabaseSoap)(this)).BeginGetAccount2(accountId, callback, asyncState);
        }
        
        private object[] OnEndGetAccount2(System.IAsyncResult result) {
            Tasky.WinPhone.SyncTodayServiceReference.Account retVal = ((Tasky.WinPhone.SyncTodayServiceReference.TaskDatabaseSoap)(this)).EndGetAccount2(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAccount2Completed(object state) {
            if ((this.GetAccount2Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAccount2Completed(this, new GetAccount2CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAccount2Async(string accountId) {
            this.GetAccount2Async(accountId, null);
        }
        
        public void GetAccount2Async(string accountId, object userState) {
            if ((this.onBeginGetAccount2Delegate == null)) {
                this.onBeginGetAccount2Delegate = new BeginOperationDelegate(this.OnBeginGetAccount2);
            }
            if ((this.onEndGetAccount2Delegate == null)) {
                this.onEndGetAccount2Delegate = new EndOperationDelegate(this.OnEndGetAccount2);
            }
            if ((this.onGetAccount2CompletedDelegate == null)) {
                this.onGetAccount2CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAccount2Completed);
            }
            base.InvokeAsync(this.onBeginGetAccount2Delegate, new object[] {
                        accountId}, this.onEndGetAccount2Delegate, this.onGetAccount2CompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Tasky.WinPhone.SyncTodayServiceReference.TaskDatabaseSoap.BeginGetTasks(Tasky.WinPhone.SyncTodayServiceReference.Account account, Tasky.WinPhone.SyncTodayServiceReference.User user, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTasks(account, user, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Tasky.WinPhone.SyncTodayServiceReference.NuTask[] Tasky.WinPhone.SyncTodayServiceReference.TaskDatabaseSoap.EndGetTasks(System.IAsyncResult result) {
            return base.Channel.EndGetTasks(result);
        }
        
        private System.IAsyncResult OnBeginGetTasks(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Tasky.WinPhone.SyncTodayServiceReference.Account account = ((Tasky.WinPhone.SyncTodayServiceReference.Account)(inValues[0]));
            Tasky.WinPhone.SyncTodayServiceReference.User user = ((Tasky.WinPhone.SyncTodayServiceReference.User)(inValues[1]));
            return ((Tasky.WinPhone.SyncTodayServiceReference.TaskDatabaseSoap)(this)).BeginGetTasks(account, user, callback, asyncState);
        }
        
        private object[] OnEndGetTasks(System.IAsyncResult result) {
            Tasky.WinPhone.SyncTodayServiceReference.NuTask[] retVal = ((Tasky.WinPhone.SyncTodayServiceReference.TaskDatabaseSoap)(this)).EndGetTasks(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTasksCompleted(object state) {
            if ((this.GetTasksCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTasksCompleted(this, new GetTasksCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTasksAsync(Tasky.WinPhone.SyncTodayServiceReference.Account account, Tasky.WinPhone.SyncTodayServiceReference.User user) {
            this.GetTasksAsync(account, user, null);
        }
        
        public void GetTasksAsync(Tasky.WinPhone.SyncTodayServiceReference.Account account, Tasky.WinPhone.SyncTodayServiceReference.User user, object userState) {
            if ((this.onBeginGetTasksDelegate == null)) {
                this.onBeginGetTasksDelegate = new BeginOperationDelegate(this.OnBeginGetTasks);
            }
            if ((this.onEndGetTasksDelegate == null)) {
                this.onEndGetTasksDelegate = new EndOperationDelegate(this.OnEndGetTasks);
            }
            if ((this.onGetTasksCompletedDelegate == null)) {
                this.onGetTasksCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTasksCompleted);
            }
            base.InvokeAsync(this.onBeginGetTasksDelegate, new object[] {
                        account,
                        user}, this.onEndGetTasksDelegate, this.onGetTasksCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Tasky.WinPhone.SyncTodayServiceReference.TaskDatabaseSoap.BeginGetTasks2(string accountId, string userInternalId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTasks2(accountId, userInternalId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Tasky.WinPhone.SyncTodayServiceReference.NuTask[] Tasky.WinPhone.SyncTodayServiceReference.TaskDatabaseSoap.EndGetTasks2(System.IAsyncResult result) {
            return base.Channel.EndGetTasks2(result);
        }
        
        private System.IAsyncResult OnBeginGetTasks2(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string accountId = ((string)(inValues[0]));
            string userInternalId = ((string)(inValues[1]));
            return ((Tasky.WinPhone.SyncTodayServiceReference.TaskDatabaseSoap)(this)).BeginGetTasks2(accountId, userInternalId, callback, asyncState);
        }
        
        private object[] OnEndGetTasks2(System.IAsyncResult result) {
            Tasky.WinPhone.SyncTodayServiceReference.NuTask[] retVal = ((Tasky.WinPhone.SyncTodayServiceReference.TaskDatabaseSoap)(this)).EndGetTasks2(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTasks2Completed(object state) {
            if ((this.GetTasks2Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTasks2Completed(this, new GetTasks2CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTasks2Async(string accountId, string userInternalId) {
            this.GetTasks2Async(accountId, userInternalId, null);
        }
        
        public void GetTasks2Async(string accountId, string userInternalId, object userState) {
            if ((this.onBeginGetTasks2Delegate == null)) {
                this.onBeginGetTasks2Delegate = new BeginOperationDelegate(this.OnBeginGetTasks2);
            }
            if ((this.onEndGetTasks2Delegate == null)) {
                this.onEndGetTasks2Delegate = new EndOperationDelegate(this.OnEndGetTasks2);
            }
            if ((this.onGetTasks2CompletedDelegate == null)) {
                this.onGetTasks2CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTasks2Completed);
            }
            base.InvokeAsync(this.onBeginGetTasks2Delegate, new object[] {
                        accountId,
                        userInternalId}, this.onEndGetTasks2Delegate, this.onGetTasks2CompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Tasky.WinPhone.SyncTodayServiceReference.TaskDatabaseSoap.BeginGetTask(Tasky.WinPhone.SyncTodayServiceReference.Account account, Tasky.WinPhone.SyncTodayServiceReference.User user, string id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTask(account, user, id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Tasky.WinPhone.SyncTodayServiceReference.NuTask Tasky.WinPhone.SyncTodayServiceReference.TaskDatabaseSoap.EndGetTask(System.IAsyncResult result) {
            return base.Channel.EndGetTask(result);
        }
        
        private System.IAsyncResult OnBeginGetTask(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Tasky.WinPhone.SyncTodayServiceReference.Account account = ((Tasky.WinPhone.SyncTodayServiceReference.Account)(inValues[0]));
            Tasky.WinPhone.SyncTodayServiceReference.User user = ((Tasky.WinPhone.SyncTodayServiceReference.User)(inValues[1]));
            string id = ((string)(inValues[2]));
            return ((Tasky.WinPhone.SyncTodayServiceReference.TaskDatabaseSoap)(this)).BeginGetTask(account, user, id, callback, asyncState);
        }
        
        private object[] OnEndGetTask(System.IAsyncResult result) {
            Tasky.WinPhone.SyncTodayServiceReference.NuTask retVal = ((Tasky.WinPhone.SyncTodayServiceReference.TaskDatabaseSoap)(this)).EndGetTask(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTaskCompleted(object state) {
            if ((this.GetTaskCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTaskCompleted(this, new GetTaskCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTaskAsync(Tasky.WinPhone.SyncTodayServiceReference.Account account, Tasky.WinPhone.SyncTodayServiceReference.User user, string id) {
            this.GetTaskAsync(account, user, id, null);
        }
        
        public void GetTaskAsync(Tasky.WinPhone.SyncTodayServiceReference.Account account, Tasky.WinPhone.SyncTodayServiceReference.User user, string id, object userState) {
            if ((this.onBeginGetTaskDelegate == null)) {
                this.onBeginGetTaskDelegate = new BeginOperationDelegate(this.OnBeginGetTask);
            }
            if ((this.onEndGetTaskDelegate == null)) {
                this.onEndGetTaskDelegate = new EndOperationDelegate(this.OnEndGetTask);
            }
            if ((this.onGetTaskCompletedDelegate == null)) {
                this.onGetTaskCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTaskCompleted);
            }
            base.InvokeAsync(this.onBeginGetTaskDelegate, new object[] {
                        account,
                        user,
                        id}, this.onEndGetTaskDelegate, this.onGetTaskCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Tasky.WinPhone.SyncTodayServiceReference.TaskDatabaseSoap.BeginGetTask2(string accountId, string userInternalId, string id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTask2(accountId, userInternalId, id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Tasky.WinPhone.SyncTodayServiceReference.NuTask Tasky.WinPhone.SyncTodayServiceReference.TaskDatabaseSoap.EndGetTask2(System.IAsyncResult result) {
            return base.Channel.EndGetTask2(result);
        }
        
        private System.IAsyncResult OnBeginGetTask2(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string accountId = ((string)(inValues[0]));
            string userInternalId = ((string)(inValues[1]));
            string id = ((string)(inValues[2]));
            return ((Tasky.WinPhone.SyncTodayServiceReference.TaskDatabaseSoap)(this)).BeginGetTask2(accountId, userInternalId, id, callback, asyncState);
        }
        
        private object[] OnEndGetTask2(System.IAsyncResult result) {
            Tasky.WinPhone.SyncTodayServiceReference.NuTask retVal = ((Tasky.WinPhone.SyncTodayServiceReference.TaskDatabaseSoap)(this)).EndGetTask2(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTask2Completed(object state) {
            if ((this.GetTask2Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTask2Completed(this, new GetTask2CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTask2Async(string accountId, string userInternalId, string id) {
            this.GetTask2Async(accountId, userInternalId, id, null);
        }
        
        public void GetTask2Async(string accountId, string userInternalId, string id, object userState) {
            if ((this.onBeginGetTask2Delegate == null)) {
                this.onBeginGetTask2Delegate = new BeginOperationDelegate(this.OnBeginGetTask2);
            }
            if ((this.onEndGetTask2Delegate == null)) {
                this.onEndGetTask2Delegate = new EndOperationDelegate(this.OnEndGetTask2);
            }
            if ((this.onGetTask2CompletedDelegate == null)) {
                this.onGetTask2CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTask2Completed);
            }
            base.InvokeAsync(this.onBeginGetTask2Delegate, new object[] {
                        accountId,
                        userInternalId,
                        id}, this.onEndGetTask2Delegate, this.onGetTask2CompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Tasky.WinPhone.SyncTodayServiceReference.TaskDatabaseSoap.BeginSaveTask(Tasky.WinPhone.SyncTodayServiceReference.Account account, Tasky.WinPhone.SyncTodayServiceReference.User user, Tasky.WinPhone.SyncTodayServiceReference.NuTask task, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveTask(account, user, task, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Tasky.WinPhone.SyncTodayServiceReference.NuTask Tasky.WinPhone.SyncTodayServiceReference.TaskDatabaseSoap.EndSaveTask(System.IAsyncResult result) {
            return base.Channel.EndSaveTask(result);
        }
        
        private System.IAsyncResult OnBeginSaveTask(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Tasky.WinPhone.SyncTodayServiceReference.Account account = ((Tasky.WinPhone.SyncTodayServiceReference.Account)(inValues[0]));
            Tasky.WinPhone.SyncTodayServiceReference.User user = ((Tasky.WinPhone.SyncTodayServiceReference.User)(inValues[1]));
            Tasky.WinPhone.SyncTodayServiceReference.NuTask task = ((Tasky.WinPhone.SyncTodayServiceReference.NuTask)(inValues[2]));
            return ((Tasky.WinPhone.SyncTodayServiceReference.TaskDatabaseSoap)(this)).BeginSaveTask(account, user, task, callback, asyncState);
        }
        
        private object[] OnEndSaveTask(System.IAsyncResult result) {
            Tasky.WinPhone.SyncTodayServiceReference.NuTask retVal = ((Tasky.WinPhone.SyncTodayServiceReference.TaskDatabaseSoap)(this)).EndSaveTask(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveTaskCompleted(object state) {
            if ((this.SaveTaskCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveTaskCompleted(this, new SaveTaskCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveTaskAsync(Tasky.WinPhone.SyncTodayServiceReference.Account account, Tasky.WinPhone.SyncTodayServiceReference.User user, Tasky.WinPhone.SyncTodayServiceReference.NuTask task) {
            this.SaveTaskAsync(account, user, task, null);
        }
        
        public void SaveTaskAsync(Tasky.WinPhone.SyncTodayServiceReference.Account account, Tasky.WinPhone.SyncTodayServiceReference.User user, Tasky.WinPhone.SyncTodayServiceReference.NuTask task, object userState) {
            if ((this.onBeginSaveTaskDelegate == null)) {
                this.onBeginSaveTaskDelegate = new BeginOperationDelegate(this.OnBeginSaveTask);
            }
            if ((this.onEndSaveTaskDelegate == null)) {
                this.onEndSaveTaskDelegate = new EndOperationDelegate(this.OnEndSaveTask);
            }
            if ((this.onSaveTaskCompletedDelegate == null)) {
                this.onSaveTaskCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveTaskCompleted);
            }
            base.InvokeAsync(this.onBeginSaveTaskDelegate, new object[] {
                        account,
                        user,
                        task}, this.onEndSaveTaskDelegate, this.onSaveTaskCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Tasky.WinPhone.SyncTodayServiceReference.TaskDatabaseSoap.BeginChangeTaskExternalId(Tasky.WinPhone.SyncTodayServiceReference.Account account, Tasky.WinPhone.SyncTodayServiceReference.User user, string oldId, Tasky.WinPhone.SyncTodayServiceReference.NuTask task, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginChangeTaskExternalId(account, user, oldId, task, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Tasky.WinPhone.SyncTodayServiceReference.NuTask Tasky.WinPhone.SyncTodayServiceReference.TaskDatabaseSoap.EndChangeTaskExternalId(System.IAsyncResult result) {
            return base.Channel.EndChangeTaskExternalId(result);
        }
        
        private System.IAsyncResult OnBeginChangeTaskExternalId(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Tasky.WinPhone.SyncTodayServiceReference.Account account = ((Tasky.WinPhone.SyncTodayServiceReference.Account)(inValues[0]));
            Tasky.WinPhone.SyncTodayServiceReference.User user = ((Tasky.WinPhone.SyncTodayServiceReference.User)(inValues[1]));
            string oldId = ((string)(inValues[2]));
            Tasky.WinPhone.SyncTodayServiceReference.NuTask task = ((Tasky.WinPhone.SyncTodayServiceReference.NuTask)(inValues[3]));
            return ((Tasky.WinPhone.SyncTodayServiceReference.TaskDatabaseSoap)(this)).BeginChangeTaskExternalId(account, user, oldId, task, callback, asyncState);
        }
        
        private object[] OnEndChangeTaskExternalId(System.IAsyncResult result) {
            Tasky.WinPhone.SyncTodayServiceReference.NuTask retVal = ((Tasky.WinPhone.SyncTodayServiceReference.TaskDatabaseSoap)(this)).EndChangeTaskExternalId(result);
            return new object[] {
                    retVal};
        }
        
        private void OnChangeTaskExternalIdCompleted(object state) {
            if ((this.ChangeTaskExternalIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ChangeTaskExternalIdCompleted(this, new ChangeTaskExternalIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ChangeTaskExternalIdAsync(Tasky.WinPhone.SyncTodayServiceReference.Account account, Tasky.WinPhone.SyncTodayServiceReference.User user, string oldId, Tasky.WinPhone.SyncTodayServiceReference.NuTask task) {
            this.ChangeTaskExternalIdAsync(account, user, oldId, task, null);
        }
        
        public void ChangeTaskExternalIdAsync(Tasky.WinPhone.SyncTodayServiceReference.Account account, Tasky.WinPhone.SyncTodayServiceReference.User user, string oldId, Tasky.WinPhone.SyncTodayServiceReference.NuTask task, object userState) {
            if ((this.onBeginChangeTaskExternalIdDelegate == null)) {
                this.onBeginChangeTaskExternalIdDelegate = new BeginOperationDelegate(this.OnBeginChangeTaskExternalId);
            }
            if ((this.onEndChangeTaskExternalIdDelegate == null)) {
                this.onEndChangeTaskExternalIdDelegate = new EndOperationDelegate(this.OnEndChangeTaskExternalId);
            }
            if ((this.onChangeTaskExternalIdCompletedDelegate == null)) {
                this.onChangeTaskExternalIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnChangeTaskExternalIdCompleted);
            }
            base.InvokeAsync(this.onBeginChangeTaskExternalIdDelegate, new object[] {
                        account,
                        user,
                        oldId,
                        task}, this.onEndChangeTaskExternalIdDelegate, this.onChangeTaskExternalIdCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Tasky.WinPhone.SyncTodayServiceReference.TaskDatabaseSoap.BeginGetUserSalt(string email, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUserSalt(email, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string Tasky.WinPhone.SyncTodayServiceReference.TaskDatabaseSoap.EndGetUserSalt(System.IAsyncResult result) {
            return base.Channel.EndGetUserSalt(result);
        }
        
        private System.IAsyncResult OnBeginGetUserSalt(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string email = ((string)(inValues[0]));
            return ((Tasky.WinPhone.SyncTodayServiceReference.TaskDatabaseSoap)(this)).BeginGetUserSalt(email, callback, asyncState);
        }
        
        private object[] OnEndGetUserSalt(System.IAsyncResult result) {
            string retVal = ((Tasky.WinPhone.SyncTodayServiceReference.TaskDatabaseSoap)(this)).EndGetUserSalt(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserSaltCompleted(object state) {
            if ((this.GetUserSaltCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserSaltCompleted(this, new GetUserSaltCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserSaltAsync(string email) {
            this.GetUserSaltAsync(email, null);
        }
        
        public void GetUserSaltAsync(string email, object userState) {
            if ((this.onBeginGetUserSaltDelegate == null)) {
                this.onBeginGetUserSaltDelegate = new BeginOperationDelegate(this.OnBeginGetUserSalt);
            }
            if ((this.onEndGetUserSaltDelegate == null)) {
                this.onEndGetUserSaltDelegate = new EndOperationDelegate(this.OnEndGetUserSalt);
            }
            if ((this.onGetUserSaltCompletedDelegate == null)) {
                this.onGetUserSaltCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserSaltCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserSaltDelegate, new object[] {
                        email}, this.onEndGetUserSaltDelegate, this.onGetUserSaltCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Tasky.WinPhone.SyncTodayServiceReference.TaskDatabaseSoap.BeginLoginUser(Tasky.WinPhone.SyncTodayServiceReference.User user, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLoginUser(user, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool Tasky.WinPhone.SyncTodayServiceReference.TaskDatabaseSoap.EndLoginUser(System.IAsyncResult result) {
            return base.Channel.EndLoginUser(result);
        }
        
        private System.IAsyncResult OnBeginLoginUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Tasky.WinPhone.SyncTodayServiceReference.User user = ((Tasky.WinPhone.SyncTodayServiceReference.User)(inValues[0]));
            return ((Tasky.WinPhone.SyncTodayServiceReference.TaskDatabaseSoap)(this)).BeginLoginUser(user, callback, asyncState);
        }
        
        private object[] OnEndLoginUser(System.IAsyncResult result) {
            bool retVal = ((Tasky.WinPhone.SyncTodayServiceReference.TaskDatabaseSoap)(this)).EndLoginUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLoginUserCompleted(object state) {
            if ((this.LoginUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LoginUserCompleted(this, new LoginUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LoginUserAsync(Tasky.WinPhone.SyncTodayServiceReference.User user) {
            this.LoginUserAsync(user, null);
        }
        
        public void LoginUserAsync(Tasky.WinPhone.SyncTodayServiceReference.User user, object userState) {
            if ((this.onBeginLoginUserDelegate == null)) {
                this.onBeginLoginUserDelegate = new BeginOperationDelegate(this.OnBeginLoginUser);
            }
            if ((this.onEndLoginUserDelegate == null)) {
                this.onEndLoginUserDelegate = new EndOperationDelegate(this.OnEndLoginUser);
            }
            if ((this.onLoginUserCompletedDelegate == null)) {
                this.onLoginUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLoginUserCompleted);
            }
            base.InvokeAsync(this.onBeginLoginUserDelegate, new object[] {
                        user}, this.onEndLoginUserDelegate, this.onLoginUserCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Tasky.WinPhone.SyncTodayServiceReference.TaskDatabaseSoap.BeginLoginUser2(string email, string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLoginUser2(email, password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Tasky.WinPhone.SyncTodayServiceReference.User Tasky.WinPhone.SyncTodayServiceReference.TaskDatabaseSoap.EndLoginUser2(System.IAsyncResult result) {
            return base.Channel.EndLoginUser2(result);
        }
        
        private System.IAsyncResult OnBeginLoginUser2(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string email = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            return ((Tasky.WinPhone.SyncTodayServiceReference.TaskDatabaseSoap)(this)).BeginLoginUser2(email, password, callback, asyncState);
        }
        
        private object[] OnEndLoginUser2(System.IAsyncResult result) {
            Tasky.WinPhone.SyncTodayServiceReference.User retVal = ((Tasky.WinPhone.SyncTodayServiceReference.TaskDatabaseSoap)(this)).EndLoginUser2(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLoginUser2Completed(object state) {
            if ((this.LoginUser2Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LoginUser2Completed(this, new LoginUser2CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LoginUser2Async(string email, string password) {
            this.LoginUser2Async(email, password, null);
        }
        
        public void LoginUser2Async(string email, string password, object userState) {
            if ((this.onBeginLoginUser2Delegate == null)) {
                this.onBeginLoginUser2Delegate = new BeginOperationDelegate(this.OnBeginLoginUser2);
            }
            if ((this.onEndLoginUser2Delegate == null)) {
                this.onEndLoginUser2Delegate = new EndOperationDelegate(this.OnEndLoginUser2);
            }
            if ((this.onLoginUser2CompletedDelegate == null)) {
                this.onLoginUser2CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLoginUser2Completed);
            }
            base.InvokeAsync(this.onBeginLoginUser2Delegate, new object[] {
                        email,
                        password}, this.onEndLoginUser2Delegate, this.onLoginUser2CompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Tasky.WinPhone.SyncTodayServiceReference.TaskDatabaseSoap.BeginGetAccountForClient(System.Guid userid, System.Guid clientId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAccountForClient(userid, clientId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Tasky.WinPhone.SyncTodayServiceReference.Account Tasky.WinPhone.SyncTodayServiceReference.TaskDatabaseSoap.EndGetAccountForClient(System.IAsyncResult result) {
            return base.Channel.EndGetAccountForClient(result);
        }
        
        private System.IAsyncResult OnBeginGetAccountForClient(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userid = ((System.Guid)(inValues[0]));
            System.Guid clientId = ((System.Guid)(inValues[1]));
            return ((Tasky.WinPhone.SyncTodayServiceReference.TaskDatabaseSoap)(this)).BeginGetAccountForClient(userid, clientId, callback, asyncState);
        }
        
        private object[] OnEndGetAccountForClient(System.IAsyncResult result) {
            Tasky.WinPhone.SyncTodayServiceReference.Account retVal = ((Tasky.WinPhone.SyncTodayServiceReference.TaskDatabaseSoap)(this)).EndGetAccountForClient(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAccountForClientCompleted(object state) {
            if ((this.GetAccountForClientCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAccountForClientCompleted(this, new GetAccountForClientCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAccountForClientAsync(System.Guid userid, System.Guid clientId) {
            this.GetAccountForClientAsync(userid, clientId, null);
        }
        
        public void GetAccountForClientAsync(System.Guid userid, System.Guid clientId, object userState) {
            if ((this.onBeginGetAccountForClientDelegate == null)) {
                this.onBeginGetAccountForClientDelegate = new BeginOperationDelegate(this.OnBeginGetAccountForClient);
            }
            if ((this.onEndGetAccountForClientDelegate == null)) {
                this.onEndGetAccountForClientDelegate = new EndOperationDelegate(this.OnEndGetAccountForClient);
            }
            if ((this.onGetAccountForClientCompletedDelegate == null)) {
                this.onGetAccountForClientCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAccountForClientCompleted);
            }
            base.InvokeAsync(this.onBeginGetAccountForClientDelegate, new object[] {
                        userid,
                        clientId}, this.onEndGetAccountForClientDelegate, this.onGetAccountForClientCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Tasky.WinPhone.SyncTodayServiceReference.TaskDatabaseSoap CreateChannel() {
            return new TaskDatabaseSoapClientChannel(this);
        }
        
        private class TaskDatabaseSoapClientChannel : ChannelBase<Tasky.WinPhone.SyncTodayServiceReference.TaskDatabaseSoap>, Tasky.WinPhone.SyncTodayServiceReference.TaskDatabaseSoap {
            
            public TaskDatabaseSoapClientChannel(System.ServiceModel.ClientBase<Tasky.WinPhone.SyncTodayServiceReference.TaskDatabaseSoap> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetAccount(System.Guid accountId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = accountId;
                System.IAsyncResult _result = base.BeginInvoke("GetAccount", _args, callback, asyncState);
                return _result;
            }
            
            public Tasky.WinPhone.SyncTodayServiceReference.Account EndGetAccount(System.IAsyncResult result) {
                object[] _args = new object[0];
                Tasky.WinPhone.SyncTodayServiceReference.Account _result = ((Tasky.WinPhone.SyncTodayServiceReference.Account)(base.EndInvoke("GetAccount", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAccount2(string accountId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = accountId;
                System.IAsyncResult _result = base.BeginInvoke("GetAccount2", _args, callback, asyncState);
                return _result;
            }
            
            public Tasky.WinPhone.SyncTodayServiceReference.Account EndGetAccount2(System.IAsyncResult result) {
                object[] _args = new object[0];
                Tasky.WinPhone.SyncTodayServiceReference.Account _result = ((Tasky.WinPhone.SyncTodayServiceReference.Account)(base.EndInvoke("GetAccount2", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetTasks(Tasky.WinPhone.SyncTodayServiceReference.Account account, Tasky.WinPhone.SyncTodayServiceReference.User user, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = account;
                _args[1] = user;
                System.IAsyncResult _result = base.BeginInvoke("GetTasks", _args, callback, asyncState);
                return _result;
            }
            
            public Tasky.WinPhone.SyncTodayServiceReference.NuTask[] EndGetTasks(System.IAsyncResult result) {
                object[] _args = new object[0];
                Tasky.WinPhone.SyncTodayServiceReference.NuTask[] _result = ((Tasky.WinPhone.SyncTodayServiceReference.NuTask[])(base.EndInvoke("GetTasks", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetTasks2(string accountId, string userInternalId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = accountId;
                _args[1] = userInternalId;
                System.IAsyncResult _result = base.BeginInvoke("GetTasks2", _args, callback, asyncState);
                return _result;
            }
            
            public Tasky.WinPhone.SyncTodayServiceReference.NuTask[] EndGetTasks2(System.IAsyncResult result) {
                object[] _args = new object[0];
                Tasky.WinPhone.SyncTodayServiceReference.NuTask[] _result = ((Tasky.WinPhone.SyncTodayServiceReference.NuTask[])(base.EndInvoke("GetTasks2", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetTask(Tasky.WinPhone.SyncTodayServiceReference.Account account, Tasky.WinPhone.SyncTodayServiceReference.User user, string id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = account;
                _args[1] = user;
                _args[2] = id;
                System.IAsyncResult _result = base.BeginInvoke("GetTask", _args, callback, asyncState);
                return _result;
            }
            
            public Tasky.WinPhone.SyncTodayServiceReference.NuTask EndGetTask(System.IAsyncResult result) {
                object[] _args = new object[0];
                Tasky.WinPhone.SyncTodayServiceReference.NuTask _result = ((Tasky.WinPhone.SyncTodayServiceReference.NuTask)(base.EndInvoke("GetTask", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetTask2(string accountId, string userInternalId, string id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = accountId;
                _args[1] = userInternalId;
                _args[2] = id;
                System.IAsyncResult _result = base.BeginInvoke("GetTask2", _args, callback, asyncState);
                return _result;
            }
            
            public Tasky.WinPhone.SyncTodayServiceReference.NuTask EndGetTask2(System.IAsyncResult result) {
                object[] _args = new object[0];
                Tasky.WinPhone.SyncTodayServiceReference.NuTask _result = ((Tasky.WinPhone.SyncTodayServiceReference.NuTask)(base.EndInvoke("GetTask2", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSaveTask(Tasky.WinPhone.SyncTodayServiceReference.Account account, Tasky.WinPhone.SyncTodayServiceReference.User user, Tasky.WinPhone.SyncTodayServiceReference.NuTask task, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = account;
                _args[1] = user;
                _args[2] = task;
                System.IAsyncResult _result = base.BeginInvoke("SaveTask", _args, callback, asyncState);
                return _result;
            }
            
            public Tasky.WinPhone.SyncTodayServiceReference.NuTask EndSaveTask(System.IAsyncResult result) {
                object[] _args = new object[0];
                Tasky.WinPhone.SyncTodayServiceReference.NuTask _result = ((Tasky.WinPhone.SyncTodayServiceReference.NuTask)(base.EndInvoke("SaveTask", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginChangeTaskExternalId(Tasky.WinPhone.SyncTodayServiceReference.Account account, Tasky.WinPhone.SyncTodayServiceReference.User user, string oldId, Tasky.WinPhone.SyncTodayServiceReference.NuTask task, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = account;
                _args[1] = user;
                _args[2] = oldId;
                _args[3] = task;
                System.IAsyncResult _result = base.BeginInvoke("ChangeTaskExternalId", _args, callback, asyncState);
                return _result;
            }
            
            public Tasky.WinPhone.SyncTodayServiceReference.NuTask EndChangeTaskExternalId(System.IAsyncResult result) {
                object[] _args = new object[0];
                Tasky.WinPhone.SyncTodayServiceReference.NuTask _result = ((Tasky.WinPhone.SyncTodayServiceReference.NuTask)(base.EndInvoke("ChangeTaskExternalId", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetUserSalt(string email, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = email;
                System.IAsyncResult _result = base.BeginInvoke("GetUserSalt", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetUserSalt(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetUserSalt", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginLoginUser(Tasky.WinPhone.SyncTodayServiceReference.User user, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = user;
                System.IAsyncResult _result = base.BeginInvoke("LoginUser", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndLoginUser(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("LoginUser", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginLoginUser2(string email, string password, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = email;
                _args[1] = password;
                System.IAsyncResult _result = base.BeginInvoke("LoginUser2", _args, callback, asyncState);
                return _result;
            }
            
            public Tasky.WinPhone.SyncTodayServiceReference.User EndLoginUser2(System.IAsyncResult result) {
                object[] _args = new object[0];
                Tasky.WinPhone.SyncTodayServiceReference.User _result = ((Tasky.WinPhone.SyncTodayServiceReference.User)(base.EndInvoke("LoginUser2", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAccountForClient(System.Guid userid, System.Guid clientId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = userid;
                _args[1] = clientId;
                System.IAsyncResult _result = base.BeginInvoke("GetAccountForClient", _args, callback, asyncState);
                return _result;
            }
            
            public Tasky.WinPhone.SyncTodayServiceReference.Account EndGetAccountForClient(System.IAsyncResult result) {
                object[] _args = new object[0];
                Tasky.WinPhone.SyncTodayServiceReference.Account _result = ((Tasky.WinPhone.SyncTodayServiceReference.Account)(base.EndInvoke("GetAccountForClient", _args, result)));
                return _result;
            }
        }
    }
}
