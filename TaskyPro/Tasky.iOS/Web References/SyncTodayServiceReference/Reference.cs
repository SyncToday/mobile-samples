// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.17020
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace Tasky.SyncTodayServiceReference {
    
    
    /// <remarks/>
    [System.Web.Services.WebServiceBinding(Name="TaskDatabaseSoap", Namespace="http://sync.today/")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(NuObject))]
    public partial class TaskDatabase : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetAccountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAccount2OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTasksOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTasks2OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTask2OperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveTaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangeTaskExternalIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserSaltOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoginUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoginUser2OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAccountForClientOperationCompleted;
        
        public TaskDatabase() {
            this.Url = "http://wsdl.sync.today/TaskDatabase.asmx";
        }
        
        public TaskDatabase(string url) {
            this.Url = url;
        }
        
        public event GetAccountCompletedEventHandler GetAccountCompleted;
        
        public event GetAccount2CompletedEventHandler GetAccount2Completed;
        
        public event GetTasksCompletedEventHandler GetTasksCompleted;
        
        public event GetTasks2CompletedEventHandler GetTasks2Completed;
        
        public event GetTaskCompletedEventHandler GetTaskCompleted;
        
        public event GetTask2CompletedEventHandler GetTask2Completed;
        
        public event SaveTaskCompletedEventHandler SaveTaskCompleted;
        
        public event ChangeTaskExternalIdCompletedEventHandler ChangeTaskExternalIdCompleted;
        
        public event GetUserSaltCompletedEventHandler GetUserSaltCompleted;
        
        public event LoginUserCompletedEventHandler LoginUserCompleted;
        
        public event LoginUser2CompletedEventHandler LoginUser2Completed;
        
        public event GetAccountForClientCompletedEventHandler GetAccountForClientCompleted;
        
        /// <remarks>
///
///<table>
///    <tr>
///        <td>Summary:</td><td>Get account from assigned id (API client ID for example).</td>
///    </tr>
///    <tr>
///        <td>Parameters:</td><td>&nbsp;</td>
///    </tr>
///    <tr>
///        <td>accountId:</td><td>ID you got from server admin</td>
///    </tr>
///</table>
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sync.today/GetAccount", RequestNamespace="http://sync.today/", ResponseNamespace="http://sync.today/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public Account GetAccount(string accountId) {
            object[] results = this.Invoke("GetAccount", new object[] {
                        accountId});
            return ((Account)(results[0]));
        }
        
        public System.IAsyncResult BeginGetAccount(string accountId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAccount", new object[] {
                        accountId}, callback, asyncState);
        }
        
        public Account EndGetAccount(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Account)(results[0]));
        }
        
        public void GetAccountAsync(string accountId) {
            this.GetAccountAsync(accountId, null);
        }
        
        public void GetAccountAsync(string accountId, object userState) {
            if ((this.GetAccountOperationCompleted == null)) {
                this.GetAccountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAccountCompleted);
            }
            this.InvokeAsync("GetAccount", new object[] {
                        accountId}, this.GetAccountOperationCompleted, userState);
        }
        
        private void OnGetAccountCompleted(object arg) {
            if ((this.GetAccountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAccountCompleted(this, new GetAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///
///<table>
///    <tr>
///        <td>Summary:</td><td>Get account from assigned id (API client ID for example).</td>
///    </tr>
///    <tr>
///        <td>Parameters:</td><td>&nbsp;</td>
///    </tr>
///    <tr>
///        <td>accountId:</td><td>ID you got from server admin</td>
///    </tr>
///</table>
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sync.today/GetAccount2", RequestNamespace="http://sync.today/", ResponseNamespace="http://sync.today/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public Account GetAccount2(string accountId) {
            object[] results = this.Invoke("GetAccount2", new object[] {
                        accountId});
            return ((Account)(results[0]));
        }
        
        public System.IAsyncResult BeginGetAccount2(string accountId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAccount2", new object[] {
                        accountId}, callback, asyncState);
        }
        
        public Account EndGetAccount2(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Account)(results[0]));
        }
        
        public void GetAccount2Async(string accountId) {
            this.GetAccount2Async(accountId, null);
        }
        
        public void GetAccount2Async(string accountId, object userState) {
            if ((this.GetAccount2OperationCompleted == null)) {
                this.GetAccount2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAccount2Completed);
            }
            this.InvokeAsync("GetAccount2", new object[] {
                        accountId}, this.GetAccount2OperationCompleted, userState);
        }
        
        private void OnGetAccount2Completed(object arg) {
            if ((this.GetAccount2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAccount2Completed(this, new GetAccount2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///
///<table>
///    <tr>
///        <td>Summary:</td><td>Get user tasks.</td>
///    </tr>
///    <tr>
///        <td>Parameters:</td><td>&nbsp;</td>
///    </tr>
///    <tr>
///        <td>User:</td><td>Logged user.</td>
///    </tr>
///</table>
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sync.today/GetTasks", RequestNamespace="http://sync.today/", ResponseNamespace="http://sync.today/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public NuTask[] GetTasks(Account account, User user) {
            object[] results = this.Invoke("GetTasks", new object[] {
                        account,
                        user});
            return ((NuTask[])(results[0]));
        }
        
        public System.IAsyncResult BeginGetTasks(Account account, User user, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetTasks", new object[] {
                        account,
                        user}, callback, asyncState);
        }
        
        public NuTask[] EndGetTasks(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((NuTask[])(results[0]));
        }
        
        public void GetTasksAsync(Account account, User user) {
            this.GetTasksAsync(account, user, null);
        }
        
        public void GetTasksAsync(Account account, User user, object userState) {
            if ((this.GetTasksOperationCompleted == null)) {
                this.GetTasksOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTasksCompleted);
            }
            this.InvokeAsync("GetTasks", new object[] {
                        account,
                        user}, this.GetTasksOperationCompleted, userState);
        }
        
        private void OnGetTasksCompleted(object arg) {
            if ((this.GetTasksCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTasksCompleted(this, new GetTasksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///
///<table>
///    <tr>
///        <td>Summary:</td><td>Get user tasks.</td>
///    </tr>
///    <tr>
///        <td>Parameters:</td><td>&nbsp;</td>
///    </tr>
///    <tr>
///        <td>User:</td><td>Logged user.</td>
///    </tr>
///</table>
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sync.today/GetTasks2", RequestNamespace="http://sync.today/", ResponseNamespace="http://sync.today/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public NuTask[] GetTasks2(string accountId, string userInternalId) {
            object[] results = this.Invoke("GetTasks2", new object[] {
                        accountId,
                        userInternalId});
            return ((NuTask[])(results[0]));
        }
        
        public System.IAsyncResult BeginGetTasks2(string accountId, string userInternalId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetTasks2", new object[] {
                        accountId,
                        userInternalId}, callback, asyncState);
        }
        
        public NuTask[] EndGetTasks2(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((NuTask[])(results[0]));
        }
        
        public void GetTasks2Async(string accountId, string userInternalId) {
            this.GetTasks2Async(accountId, userInternalId, null);
        }
        
        public void GetTasks2Async(string accountId, string userInternalId, object userState) {
            if ((this.GetTasks2OperationCompleted == null)) {
                this.GetTasks2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTasks2Completed);
            }
            this.InvokeAsync("GetTasks2", new object[] {
                        accountId,
                        userInternalId}, this.GetTasks2OperationCompleted, userState);
        }
        
        private void OnGetTasks2Completed(object arg) {
            if ((this.GetTasks2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTasks2Completed(this, new GetTasks2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///
///<table>
///    <tr>
///        <td>Summary:</td><td>Get user tasks.</td>
///    </tr>
///    <tr>
///        <td>Parameters:</td><td>&nbsp;</td>
///    </tr>
///    <tr>
///        <td>User:</td><td>Logged user.</td>
///    </tr>
///</table>
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sync.today/GetTask", RequestNamespace="http://sync.today/", ResponseNamespace="http://sync.today/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public NuTask GetTask(Account account, User user, string id) {
            object[] results = this.Invoke("GetTask", new object[] {
                        account,
                        user,
                        id});
            return ((NuTask)(results[0]));
        }
        
        public System.IAsyncResult BeginGetTask(Account account, User user, string id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetTask", new object[] {
                        account,
                        user,
                        id}, callback, asyncState);
        }
        
        public NuTask EndGetTask(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((NuTask)(results[0]));
        }
        
        public void GetTaskAsync(Account account, User user, string id) {
            this.GetTaskAsync(account, user, id, null);
        }
        
        public void GetTaskAsync(Account account, User user, string id, object userState) {
            if ((this.GetTaskOperationCompleted == null)) {
                this.GetTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTaskCompleted);
            }
            this.InvokeAsync("GetTask", new object[] {
                        account,
                        user,
                        id}, this.GetTaskOperationCompleted, userState);
        }
        
        private void OnGetTaskCompleted(object arg) {
            if ((this.GetTaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTaskCompleted(this, new GetTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///
///<table>
///    <tr>
///        <td>Summary:</td><td>Get user tasks.</td>
///    </tr>
///    <tr>
///        <td>Parameters:</td><td>&nbsp;</td>
///    </tr>
///    <tr>
///        <td>User:</td><td>Logged user.</td>
///    </tr>
///</table>
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sync.today/GetTask2", RequestNamespace="http://sync.today/", ResponseNamespace="http://sync.today/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public NuTask GetTask2(string accountId, string userInternalId, string id) {
            object[] results = this.Invoke("GetTask2", new object[] {
                        accountId,
                        userInternalId,
                        id});
            return ((NuTask)(results[0]));
        }
        
        public System.IAsyncResult BeginGetTask2(string accountId, string userInternalId, string id, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetTask2", new object[] {
                        accountId,
                        userInternalId,
                        id}, callback, asyncState);
        }
        
        public NuTask EndGetTask2(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((NuTask)(results[0]));
        }
        
        public void GetTask2Async(string accountId, string userInternalId, string id) {
            this.GetTask2Async(accountId, userInternalId, id, null);
        }
        
        public void GetTask2Async(string accountId, string userInternalId, string id, object userState) {
            if ((this.GetTask2OperationCompleted == null)) {
                this.GetTask2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTask2Completed);
            }
            this.InvokeAsync("GetTask2", new object[] {
                        accountId,
                        userInternalId,
                        id}, this.GetTask2OperationCompleted, userState);
        }
        
        private void OnGetTask2Completed(object arg) {
            if ((this.GetTask2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTask2Completed(this, new GetTask2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///
///<table>
///    <tr>
///        <td>Summary:</td><td>Save user's task.</td>
///    </tr>
///    <tr>
///        <td>Parameters:</td><td>&nbsp;</td>
///    </tr>
///    <tr>
///        <td>User:</td><td>Logged user.</td>
///    </tr>
///</table>
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sync.today/SaveTask", RequestNamespace="http://sync.today/", ResponseNamespace="http://sync.today/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public NuTask SaveTask(Account account, User user, NuTask task) {
            object[] results = this.Invoke("SaveTask", new object[] {
                        account,
                        user,
                        task});
            return ((NuTask)(results[0]));
        }
        
        public System.IAsyncResult BeginSaveTask(Account account, User user, NuTask task, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SaveTask", new object[] {
                        account,
                        user,
                        task}, callback, asyncState);
        }
        
        public NuTask EndSaveTask(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((NuTask)(results[0]));
        }
        
        public void SaveTaskAsync(Account account, User user, NuTask task) {
            this.SaveTaskAsync(account, user, task, null);
        }
        
        public void SaveTaskAsync(Account account, User user, NuTask task, object userState) {
            if ((this.SaveTaskOperationCompleted == null)) {
                this.SaveTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveTaskCompleted);
            }
            this.InvokeAsync("SaveTask", new object[] {
                        account,
                        user,
                        task}, this.SaveTaskOperationCompleted, userState);
        }
        
        private void OnSaveTaskCompleted(object arg) {
            if ((this.SaveTaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveTaskCompleted(this, new SaveTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///
///<table>
///    <tr>
///        <td>Summary:</td><td>Change task external ID.</td>
///    </tr>
///    <tr>
///        <td>Parameters:</td><td>&nbsp;</td>
///    </tr>
///    <tr>
///        <td>User:</td><td>Logged user.</td>
///    </tr>
///</table>
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sync.today/ChangeTaskExternalId", RequestNamespace="http://sync.today/", ResponseNamespace="http://sync.today/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public NuTask ChangeTaskExternalId(Account account, User user, string oldId, NuTask task) {
            object[] results = this.Invoke("ChangeTaskExternalId", new object[] {
                        account,
                        user,
                        oldId,
                        task});
            return ((NuTask)(results[0]));
        }
        
        public System.IAsyncResult BeginChangeTaskExternalId(Account account, User user, string oldId, NuTask task, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ChangeTaskExternalId", new object[] {
                        account,
                        user,
                        oldId,
                        task}, callback, asyncState);
        }
        
        public NuTask EndChangeTaskExternalId(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((NuTask)(results[0]));
        }
        
        public void ChangeTaskExternalIdAsync(Account account, User user, string oldId, NuTask task) {
            this.ChangeTaskExternalIdAsync(account, user, oldId, task, null);
        }
        
        public void ChangeTaskExternalIdAsync(Account account, User user, string oldId, NuTask task, object userState) {
            if ((this.ChangeTaskExternalIdOperationCompleted == null)) {
                this.ChangeTaskExternalIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeTaskExternalIdCompleted);
            }
            this.InvokeAsync("ChangeTaskExternalId", new object[] {
                        account,
                        user,
                        oldId,
                        task}, this.ChangeTaskExternalIdOperationCompleted, userState);
        }
        
        private void OnChangeTaskExternalIdCompleted(object arg) {
            if ((this.ChangeTaskExternalIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangeTaskExternalIdCompleted(this, new ChangeTaskExternalIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///
///<table>
///    <tr>
///        <td>Summary:</td><td>Get the salt for the user. Compute the password using code from https://crackstation.net/hashing-security.htm. </td>
///    </tr>
///
///</table>
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sync.today/GetUserSalt", RequestNamespace="http://sync.today/", ResponseNamespace="http://sync.today/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public string GetUserSalt(string email) {
            object[] results = this.Invoke("GetUserSalt", new object[] {
                        email});
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult BeginGetUserSalt(string email, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetUserSalt", new object[] {
                        email}, callback, asyncState);
        }
        
        public string EndGetUserSalt(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void GetUserSaltAsync(string email) {
            this.GetUserSaltAsync(email, null);
        }
        
        public void GetUserSaltAsync(string email, object userState) {
            if ((this.GetUserSaltOperationCompleted == null)) {
                this.GetUserSaltOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserSaltCompleted);
            }
            this.InvokeAsync("GetUserSalt", new object[] {
                        email}, this.GetUserSaltOperationCompleted, userState);
        }
        
        private void OnGetUserSaltCompleted(object arg) {
            if ((this.GetUserSaltCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserSaltCompleted(this, new GetUserSaltCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///
///<table>
///    <tr>
///        <td>Summary:</td><td>Logs the user. Real user accounts are connected to this user.</td>
///    </tr>
///    <tr>
///        <td>Parameters:</td><td>&nbsp;</td>
///    </tr>
///    <tr>
///        <td>User:</td><td>basic user attributes.</td>
///    </tr>
///</table>
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sync.today/LoginUser", RequestNamespace="http://sync.today/", ResponseNamespace="http://sync.today/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public bool LoginUser(User user) {
            object[] results = this.Invoke("LoginUser", new object[] {
                        user});
            return ((bool)(results[0]));
        }
        
        public System.IAsyncResult BeginLoginUser(User user, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("LoginUser", new object[] {
                        user}, callback, asyncState);
        }
        
        public bool EndLoginUser(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        public void LoginUserAsync(User user) {
            this.LoginUserAsync(user, null);
        }
        
        public void LoginUserAsync(User user, object userState) {
            if ((this.LoginUserOperationCompleted == null)) {
                this.LoginUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginUserCompleted);
            }
            this.InvokeAsync("LoginUser", new object[] {
                        user}, this.LoginUserOperationCompleted, userState);
        }
        
        private void OnLoginUserCompleted(object arg) {
            if ((this.LoginUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginUserCompleted(this, new LoginUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///
///<table>
///    <tr>
///        <td>Summary:</td><td>Logs the user. Real user accounts are connected to this user.</td>
///    </tr>
///    <tr>
///        <td>Parameters:</td><td>&nbsp;</td>
///    </tr>
///    <tr>
///        <td>User:</td><td>basic user attributes.</td>
///    </tr>
///</table>
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sync.today/LoginUser2", RequestNamespace="http://sync.today/", ResponseNamespace="http://sync.today/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public User LoginUser2(string email, string password) {
            object[] results = this.Invoke("LoginUser2", new object[] {
                        email,
                        password});
            return ((User)(results[0]));
        }
        
        public System.IAsyncResult BeginLoginUser2(string email, string password, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("LoginUser2", new object[] {
                        email,
                        password}, callback, asyncState);
        }
        
        public User EndLoginUser2(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((User)(results[0]));
        }
        
        public void LoginUser2Async(string email, string password) {
            this.LoginUser2Async(email, password, null);
        }
        
        public void LoginUser2Async(string email, string password, object userState) {
            if ((this.LoginUser2OperationCompleted == null)) {
                this.LoginUser2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginUser2Completed);
            }
            this.InvokeAsync("LoginUser2", new object[] {
                        email,
                        password}, this.LoginUser2OperationCompleted, userState);
        }
        
        private void OnLoginUser2Completed(object arg) {
            if ((this.LoginUser2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginUser2Completed(this, new LoginUser2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sync.today/GetAccountForClient", RequestNamespace="http://sync.today/", ResponseNamespace="http://sync.today/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public Account GetAccountForClient(string userid, string clientId) {
            object[] results = this.Invoke("GetAccountForClient", new object[] {
                        userid,
                        clientId});
            return ((Account)(results[0]));
        }
        
        public System.IAsyncResult BeginGetAccountForClient(string userid, string clientId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAccountForClient", new object[] {
                        userid,
                        clientId}, callback, asyncState);
        }
        
        public Account EndGetAccountForClient(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Account)(results[0]));
        }
        
        public void GetAccountForClientAsync(string userid, string clientId) {
            this.GetAccountForClientAsync(userid, clientId, null);
        }
        
        public void GetAccountForClientAsync(string userid, string clientId, object userState) {
            if ((this.GetAccountForClientOperationCompleted == null)) {
                this.GetAccountForClientOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAccountForClientCompleted);
            }
            this.InvokeAsync("GetAccountForClient", new object[] {
                        userid,
                        clientId}, this.GetAccountForClientOperationCompleted, userState);
        }
        
        private void OnGetAccountForClientCompleted(object arg) {
            if ((this.GetAccountForClientCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAccountForClientCompleted(this, new GetAccountForClientCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://sync.today/")]
    public partial class Account {
        
        /// <remarks/>
        public string InternalId;
        
        /// <remarks/>
        public string BelongsToUser;
        
        /// <remarks/>
        public string Username;
        
        /// <remarks/>
        public string Password;
        
        /// <remarks/>
        public string Server;
        
        /// <remarks/>
        public CommunicatorConnectInfo ConnectInfo;
        
        /// <remarks/>
        public string AccountAssemblyName;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://sync.today/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SimpleCommunicatorConnectInfo))]
    public partial class CommunicatorConnectInfo {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://sync.today/")]
    public partial class SimpleCommunicatorConnectInfo : CommunicatorConnectInfo {
        
        /// <remarks/>
        public string Username;
        
        /// <remarks/>
        public string Password;
        
        /// <remarks/>
        public string Server;
        
        /// <remarks/>
        public string InternalId;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://sync.today/")]
    public partial class User {
        
        /// <remarks/>
        public string InternalId;
        
        /// <remarks/>
        public System.DateTime Created;
        
        /// <remarks/>
        public bool IsBlocked;
        
        /// <remarks/>
        public int Maintenance;
        
        /// <remarks/>
        public string FirstName;
        
        /// <remarks/>
        public string LastName;
        
        /// <remarks/>
        public string Email;
        
        /// <remarks/>
        public string Password;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://sync.today/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(NuRequirement))]
    public partial class NuTask : NuObject {
        
        /// <remarks/>
        public string Subject;
        
        /// <remarks/>
        public string Body;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, DataType="dateTime")]
        public System.Nullable<System.DateTime> StartDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, DataType="dateTime")]
        public System.Nullable<System.DateTime> DueDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, DataType="dateTime")]
        public System.Nullable<System.DateTime> Reminder;
        
        /// <remarks/>
        public NuTaskPriority Priority;
        
        /// <remarks/>
        public bool IsPrivate;
        
        /// <remarks/>
        public string Company;
        
        /// <remarks/>
        public bool Completed;
        
        /// <remarks/>
        public NuRequirement[] Parents;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://sync.today/")]
    public enum NuTaskPriority {
        
        /// <remarks/>
        Low,
        
        /// <remarks/>
        Normal,
        
        /// <remarks/>
        High,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://sync.today/")]
    public partial class NuRequirement : NuTask {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17020")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://sync.today/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(NuTask))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(NuRequirement))]
    public partial class NuObject {
        
        /// <remarks/>
        public string ExternalId;
        
        /// <remarks/>
        public System.DateTime LastModified;
    }
    
    public partial class GetAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Account Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Account)(this.results[0]));
            }
        }
    }
    
    public delegate void GetAccountCompletedEventHandler(object sender, GetAccountCompletedEventArgs args);
    
    public partial class GetAccount2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAccount2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Account Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Account)(this.results[0]));
            }
        }
    }
    
    public delegate void GetAccount2CompletedEventHandler(object sender, GetAccount2CompletedEventArgs args);
    
    public partial class GetTasksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTasksCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public NuTask[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((NuTask[])(this.results[0]));
            }
        }
    }
    
    public delegate void GetTasksCompletedEventHandler(object sender, GetTasksCompletedEventArgs args);
    
    public partial class GetTasks2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTasks2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public NuTask[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((NuTask[])(this.results[0]));
            }
        }
    }
    
    public delegate void GetTasks2CompletedEventHandler(object sender, GetTasks2CompletedEventArgs args);
    
    public partial class GetTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public NuTask Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((NuTask)(this.results[0]));
            }
        }
    }
    
    public delegate void GetTaskCompletedEventHandler(object sender, GetTaskCompletedEventArgs args);
    
    public partial class GetTask2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTask2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public NuTask Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((NuTask)(this.results[0]));
            }
        }
    }
    
    public delegate void GetTask2CompletedEventHandler(object sender, GetTask2CompletedEventArgs args);
    
    public partial class SaveTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public NuTask Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((NuTask)(this.results[0]));
            }
        }
    }
    
    public delegate void SaveTaskCompletedEventHandler(object sender, SaveTaskCompletedEventArgs args);
    
    public partial class ChangeTaskExternalIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangeTaskExternalIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public NuTask Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((NuTask)(this.results[0]));
            }
        }
    }
    
    public delegate void ChangeTaskExternalIdCompletedEventHandler(object sender, ChangeTaskExternalIdCompletedEventArgs args);
    
    public partial class GetUserSaltCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserSaltCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void GetUserSaltCompletedEventHandler(object sender, GetUserSaltCompletedEventArgs args);
    
    public partial class LoginUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoginUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public delegate void LoginUserCompletedEventHandler(object sender, LoginUserCompletedEventArgs args);
    
    public partial class LoginUser2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoginUser2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public User Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((User)(this.results[0]));
            }
        }
    }
    
    public delegate void LoginUser2CompletedEventHandler(object sender, LoginUser2CompletedEventArgs args);
    
    public partial class GetAccountForClientCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAccountForClientCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Account Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Account)(this.results[0]));
            }
        }
    }
    
    public delegate void GetAccountForClientCompletedEventHandler(object sender, GetAccountForClientCompletedEventArgs args);
}
